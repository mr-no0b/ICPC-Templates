ll moduloMultiplication(ll a, ll b,
                               ll mod)
{
    ll res = 0;
 
    a %= mod;
 
    while (b) {
 
        
        if (b & 1)
            res = (res + a) % mod;
 
        
        a = (2 * a) % mod;
        b /=2; 
    }
    return res;
}
 

ll gcdExtended(ll a, ll b,
                          ll* x,
                          ll* y);
 

ll modInverse(ll b, ll m)
{
 
    ll x, y;
    ll g = gcdExtended(b, m, &x, &y);
 
    if (g != 1)
        return -1;
 
    return (x % m + m) % m;
}
 

ll gcdExtended(ll a, ll b,
                         ll* x,
                          ll* y)
{
 
   
    if (a == 0) {
        *x = 0, *y = 1;
        return b;
    }
 
    
    ll x1, y1;
 
    ll gcd = gcdExtended(b % a, a, &x1, &y1);
 
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}
 
ll modDivide(ll a, ll b,
                        ll m)
{
 
    a = a % m;
    ll inv = modInverse(b, m);
    if (inv == -1)
        return 0;
    else
        return (inv * a) % m;
}
 
ll nCr(ll n, ll r, ll p)
{
    if (r > n)
        return 0;
 
    if (r > n - r)
        r = n - r;
    ll x = 1;
    for (ll i = 1; i <= r; i++) {
        x = moduloMultiplication(x, (n + 1 - i), p);
       
        x = modDivide(x, i, p);
    }
    return x;
}
